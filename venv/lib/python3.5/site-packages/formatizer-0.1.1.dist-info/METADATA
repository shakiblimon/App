Metadata-Version: 2.0
Name: formatizer
Version: 0.1.1
Summary: Literal string formatting for Python versions older than 3.6
Home-page: https://github.com/fgimian/formatizer
Author: Fotis Gimian
Author-email: fgimiansoftware@gmail.com
License: MIT
Description-Content-Type: UNKNOWN
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2.6
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3.3
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Topic :: Software Development :: Libraries
Classifier: Topic :: Utilities

Formatizer
==========

|Build Status| |Coverage Status|

.. |Build Status| image:: https://travis-ci.org/fgimian/formatizer.svg?branch=master
   :target: https://travis-ci.org/fgimian/formatizer
.. |Coverage Status| image:: https://coveralls.io/repos/fgimian/formatizer/badge.png
   :target: https://coveralls.io/r/fgimian/formatizer

.. image:: https://raw.githubusercontent.com/fgimian/formatizer/master/images/formatizer-logo.png
   :height: 225px
   :alt: Formatizer Logo

Awesome artwork provided courtesy of `Open Clip Art
Library <https://openclipart.org/detail/75799/registry-book>`__

Formatizer provides literal string formatting for Python versions older
than 3.6. This replaces the need for substitution using ``%`` or the
``format`` function.

Formatizer is covered by unit tests and Flake8 compliance. Please note
that this library does use ``eval`` to perform its expression
processing.

Quick Start
-----------

Install Formatizer in your virtualenv as follows:

.. code:: bash

    pip install formatizer

And now, go ahead and use the f function similarly to `PEP
498 <https://www.python.org/dev/peps/pep-0498/>`__:

.. code:: python

    from __future__ import print_function
    from formatizer import f

    GREETING = 'hi'

    def main():
        name = 'Fotis'
        print(f('My name is {name}, I say {GREETING} and 1 + 2 is {1 + 2}'))

    if __name__ == '__main__':
        main()

All local and global variables will be recognised by the ``f`` function
and complete Python expressions are also allowed between the braces much
like Python 3.6.


